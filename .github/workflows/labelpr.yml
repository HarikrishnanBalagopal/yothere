name: Label PRs

on:
  pull_request_target:
    types: [opened, edited, reopened]

jobs:
  label_pr:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // core.info(`context.payload.pull_request: ${JSON.stringify(context.payload.pull_request)}`);
            // core.info(`context: ${JSON.stringify(context)}`);

            const pr_welcome_msg = `Thanks for making a pull request! ðŸ˜ƒ`;
            const to_remove = ['fix', 'enhancement'];

            if(context.payload.pull_request.comments === 0) {
              await github.issues.createComment({ ...context.repo, issue_number: context.payload.number, body: pr_welcome_msg});
            }

            const title = context.payload.pull_request.title;
            const results = /^(\w+)(\(\w+\))?!?:/.exec(title);
            if (results === null) core.setFailed(`The title does not follow conventional commits spec: https://www.conventionalcommits.org/en/v1.0.0/#summary Title: ${title}`);

            const pr_type = results[1];
            core.info(`pr_type:${pr_type}`);
            let label = '';
            switch(pr_type) {
              case 'fix':
              case 'refactor':
              case 'chore':
              case 'docs':
                label = 'fix'; break;
              case 'feat':
                label = 'enhancement'; break;
            }
            core.info(`label: ${label}`);
            if(label === '')core.setFailed(`Unknown pull request type ${pr_type}`);

            const labels = context.payload.pull_request.labels;
            const new_labels = labels.filter(label => !to_remove.includes(label.name)); // remove all labels listed in to_remove
            new_labels.push({name: label});
            await github.issues.update({ ...context.repo, issue_number: context.payload.number, labels: new_labels });
